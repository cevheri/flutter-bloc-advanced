// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_bloc_advance/test/presentation/screen/account/change_password_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:flutter_bloc_advance/data/models/change_password.dart' as _i6;
import 'package:flutter_bloc_advance/data/models/user.dart' as _i2;
import 'package:flutter_bloc_advance/data/repository/account_repository.dart'
    as _i4;
import 'package:flutter_bloc_advance/presentation/screen/change_password/bloc/change_password_bloc.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChangePasswordState_1 extends _i1.SmartFake
    implements _i3.ChangePasswordState {
  _FakeChangePasswordState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i4.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.User?> register(_i2.User? newUser) => (super.noSuchMethod(
        Invocation.method(
          #register,
          [newUser],
        ),
        returnValue: _i5.Future<_i2.User?>.value(),
      ) as _i5.Future<_i2.User?>);

  @override
  _i5.Future<int> changePassword(_i6.PasswordChangeDTO? passwordChangeDTO) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [passwordChangeDTO],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> resetPassword(String? mailAddress) => (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [mailAddress],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<_i2.User> getAccount() => (super.noSuchMethod(
        Invocation.method(
          #getAccount,
          [],
        ),
        returnValue: _i5.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #getAccount,
            [],
          ),
        )),
      ) as _i5.Future<_i2.User>);

  @override
  _i5.Future<_i2.User> saveAccount(_i2.User? user) => (super.noSuchMethod(
        Invocation.method(
          #saveAccount,
          [user],
        ),
        returnValue: _i5.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #saveAccount,
            [user],
          ),
        )),
      ) as _i5.Future<_i2.User>);

  @override
  _i5.Future<_i2.User> updateAccount(_i2.User? account) => (super.noSuchMethod(
        Invocation.method(
          #updateAccount,
          [account],
        ),
        returnValue: _i5.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #updateAccount,
            [account],
          ),
        )),
      ) as _i5.Future<_i2.User>);

  @override
  _i5.Future<bool> deleteAccount(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAccount,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [ChangePasswordBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangePasswordBloc extends _i1.Mock
    implements _i3.ChangePasswordBloc {
  MockChangePasswordBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ChangePasswordState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeChangePasswordState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.ChangePasswordState);

  @override
  _i5.Stream<_i3.ChangePasswordState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.ChangePasswordState>.empty(),
      ) as _i5.Stream<_i3.ChangePasswordState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void onTransition(
          _i7.Transition<_i3.ChangePasswordEvent, _i3.ChangePasswordState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(_i3.ChangePasswordEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i3.ChangePasswordEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.ChangePasswordState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i3.ChangePasswordEvent>(
    _i7.EventHandler<E, _i3.ChangePasswordState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i7.Change<_i3.ChangePasswordState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
