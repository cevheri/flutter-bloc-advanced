// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_bloc_advance/test/presentation/blocs/user_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc_advance/data/models/user.dart' as _i2;
import 'package:flutter_bloc_advance/data/repository/user_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.User>> getUsers() => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i4.Future<List<_i2.User>>.value(<_i2.User>[]),
      ) as _i4.Future<List<_i2.User>>);

  @override
  _i4.Future<_i2.User> getUser(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [id],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #getUser,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<_i2.User?> createUser(_i2.User? user) => (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [user],
        ),
        returnValue: _i4.Future<_i2.User?>.value(),
      ) as _i4.Future<_i2.User?>);

  @override
  _i4.Future<List<_i2.User>> listUser(
    int? rangeStart,
    int? rangeEnd,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #listUser,
          [
            rangeStart,
            rangeEnd,
          ],
        ),
        returnValue: _i4.Future<List<_i2.User>>.value(<_i2.User>[]),
      ) as _i4.Future<List<_i2.User>>);

  @override
  _i4.Future<List<_i2.User>> findUserByAuthorities(
    int? rangeStart,
    int? rangeEnd,
    String? authorities,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #findUserByAuthorities,
          [
            rangeStart,
            rangeEnd,
            authorities,
          ],
        ),
        returnValue: _i4.Future<List<_i2.User>>.value(<_i2.User>[]),
      ) as _i4.Future<List<_i2.User>>);

  @override
  _i4.Future<List<_i2.User>> findUserByName(
    int? rangeStart,
    int? rangeEnd,
    String? name,
    String? authorities,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #findUserByName,
          [
            rangeStart,
            rangeEnd,
            name,
            authorities,
          ],
        ),
        returnValue: _i4.Future<List<_i2.User>>.value(<_i2.User>[]),
      ) as _i4.Future<List<_i2.User>>);

  @override
  _i4.Future<_i2.User?> updateUser(_i2.User? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i4.Future<_i2.User?>.value(),
      ) as _i4.Future<_i2.User?>);
}
