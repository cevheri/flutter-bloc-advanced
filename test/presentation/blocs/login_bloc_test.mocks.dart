// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_bloc_advance/test/presentation/blocs/login_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc_advance/data/models/change_password.dart' as _i10;
import 'package:flutter_bloc_advance/data/models/jwt_token.dart' as _i5;
import 'package:flutter_bloc_advance/data/models/send_otp_request.dart' as _i7;
import 'package:flutter_bloc_advance/data/models/user.dart' as _i2;
import 'package:flutter_bloc_advance/data/models/user_jwt.dart' as _i6;
import 'package:flutter_bloc_advance/data/models/verify_otp_request.dart'
    as _i8;
import 'package:flutter_bloc_advance/data/repository/account_repository.dart'
    as _i9;
import 'package:flutter_bloc_advance/data/repository/login_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i3.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.JWTToken?> authenticate(_i6.UserJWT? userJWT) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [userJWT],
        ),
        returnValue: _i4.Future<_i5.JWTToken?>.value(),
      ) as _i4.Future<_i5.JWTToken?>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendOtp(_i7.SendOtpRequest? request) => (super.noSuchMethod(
        Invocation.method(
          #sendOtp,
          [request],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.JWTToken?> verifyOtp(_i8.VerifyOtpRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOtp,
          [request],
        ),
        returnValue: _i4.Future<_i5.JWTToken?>.value(),
      ) as _i4.Future<_i5.JWTToken?>);
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i9.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User?> register(_i2.User? newUser) => (super.noSuchMethod(
        Invocation.method(
          #register,
          [newUser],
        ),
        returnValue: _i4.Future<_i2.User?>.value(),
      ) as _i4.Future<_i2.User?>);

  @override
  _i4.Future<int> changePassword(_i10.PasswordChangeDTO? passwordChangeDTO) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [passwordChangeDTO],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> resetPassword(String? mailAddress) => (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [mailAddress],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<_i2.User> getAccount() => (super.noSuchMethod(
        Invocation.method(
          #getAccount,
          [],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #getAccount,
            [],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<_i2.User> update(_i2.User? user) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [user],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #update,
            [user],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
