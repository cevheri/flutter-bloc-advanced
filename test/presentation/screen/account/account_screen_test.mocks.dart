// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_bloc_advance/test/presentation/screen/account/account_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:flutter_bloc_advance/data/models/change_password.dart' as _i8;
import 'package:flutter_bloc_advance/data/models/user.dart' as _i3;
import 'package:flutter_bloc_advance/data/repository/account_repository.dart' as _i7;
import 'package:flutter_bloc_advance/data/repository/user_repository.dart' as _i9;
import 'package:flutter_bloc_advance/presentation/common_blocs/account/account_bloc.dart' as _i2;
import 'package:flutter_bloc_advance/presentation/screen/user/bloc/user_bloc.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccountState_0 extends _i1.SmartFake implements _i2.AccountState {
  _FakeAccountState_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeUserState_2 extends _i1.SmartFake implements _i4.UserState {
  _FakeUserState_2(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [AccountBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountBloc extends _i1.Mock implements _i2.AccountBloc {
  MockAccountBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountState get state =>
      (super.noSuchMethod(Invocation.getter(#state), returnValue: _FakeAccountState_0(this, Invocation.getter(#state)))
          as _i2.AccountState);

  @override
  _i5.Stream<_i2.AccountState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream), returnValue: _i5.Stream<_i2.AccountState>.empty())
          as _i5.Stream<_i2.AccountState>);

  @override
  bool get isClosed => (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false) as bool);

  @override
  void add(_i2.AccountEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]), returnValueForMissingStub: null);

  @override
  void onEvent(_i2.AccountEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]), returnValueForMissingStub: null);

  @override
  void emit(_i2.AccountState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]), returnValueForMissingStub: null);

  @override
  void on<E extends _i2.AccountEvent>(
    _i6.EventHandler<E, _i2.AccountState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(_i6.Transition<_i2.AccountEvent, _i2.AccountState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]), returnValueForMissingStub: null);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i2.AccountState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]), returnValueForMissingStub: null);

  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]), returnValueForMissingStub: null);

  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]), returnValueForMissingStub: null);
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i7.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.User?> register(_i3.User? newUser) =>
      (super.noSuchMethod(Invocation.method(#register, [newUser]), returnValue: _i5.Future<_i3.User?>.value())
          as _i5.Future<_i3.User?>);

  @override
  _i5.Future<int> changePassword(_i8.PasswordChangeDTO? passwordChangeDTO) =>
      (super.noSuchMethod(
            Invocation.method(#changePassword, [passwordChangeDTO]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> resetPassword(String? mailAddress) =>
      (super.noSuchMethod(Invocation.method(#resetPassword, [mailAddress]), returnValue: _i5.Future<int>.value(0))
          as _i5.Future<int>);

  @override
  _i5.Future<_i3.User> getAccount() =>
      (super.noSuchMethod(
            Invocation.method(#getAccount, []),
            returnValue: _i5.Future<_i3.User>.value(_FakeUser_1(this, Invocation.method(#getAccount, []))),
          )
          as _i5.Future<_i3.User>);

  @override
  _i5.Future<_i3.User> update(_i3.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#update, [user]),
            returnValue: _i5.Future<_i3.User>.value(_FakeUser_1(this, Invocation.method(#update, [user]))),
          )
          as _i5.Future<_i3.User>);

  @override
  _i5.Future<bool> delete(String? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]), returnValue: _i5.Future<bool>.value(false))
          as _i5.Future<bool>);
}

/// A class which mocks [UserBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserBloc extends _i1.Mock implements _i4.UserBloc {
  MockUserBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UserState get state =>
      (super.noSuchMethod(Invocation.getter(#state), returnValue: _FakeUserState_2(this, Invocation.getter(#state)))
          as _i4.UserState);

  @override
  _i5.Stream<_i4.UserState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream), returnValue: _i5.Stream<_i4.UserState>.empty())
          as _i5.Stream<_i4.UserState>);

  @override
  bool get isClosed => (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false) as bool);

  @override
  void add(_i4.UserEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]), returnValueForMissingStub: null);

  @override
  void onEvent(_i4.UserEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]), returnValueForMissingStub: null);

  @override
  void emit(_i4.UserState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]), returnValueForMissingStub: null);

  @override
  void on<E extends _i4.UserEvent>(
    _i6.EventHandler<E, _i4.UserState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(_i6.Transition<_i4.UserEvent, _i4.UserState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]), returnValueForMissingStub: null);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i4.UserState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]), returnValueForMissingStub: null);

  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]), returnValueForMissingStub: null);

  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]), returnValueForMissingStub: null);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i9.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.User?> retrieve(String? id) =>
      (super.noSuchMethod(Invocation.method(#retrieve, [id]), returnValue: _i5.Future<_i3.User?>.value())
          as _i5.Future<_i3.User?>);

  @override
  _i5.Future<_i3.User?> retrieveByLogin(String? login) =>
      (super.noSuchMethod(Invocation.method(#retrieveByLogin, [login]), returnValue: _i5.Future<_i3.User?>.value())
          as _i5.Future<_i3.User?>);

  @override
  _i5.Future<_i3.User?> create(_i3.User? user) =>
      (super.noSuchMethod(Invocation.method(#create, [user]), returnValue: _i5.Future<_i3.User?>.value())
          as _i5.Future<_i3.User?>);

  @override
  _i5.Future<_i3.User?> update(_i3.User? user) =>
      (super.noSuchMethod(Invocation.method(#update, [user]), returnValue: _i5.Future<_i3.User?>.value())
          as _i5.Future<_i3.User?>);

  @override
  _i5.Future<List<_i3.User>> list({int? page = 0, int? size = 10, List<String>? sort = const ['id,desc']}) =>
      (super.noSuchMethod(
            Invocation.method(#list, [], {#page: page, #size: size, #sort: sort}),
            returnValue: _i5.Future<List<_i3.User>>.value(<_i3.User>[]),
          )
          as _i5.Future<List<_i3.User>>);

  @override
  _i5.Future<List<_i3.User>> listByAuthority(int? page, int? size, String? authority) =>
      (super.noSuchMethod(
            Invocation.method(#listByAuthority, [page, size, authority]),
            returnValue: _i5.Future<List<_i3.User>>.value(<_i3.User>[]),
          )
          as _i5.Future<List<_i3.User>>);

  @override
  _i5.Future<List<_i3.User>> listByNameAndRole(int? page, int? size, String? name, String? authority) =>
      (super.noSuchMethod(
            Invocation.method(#listByNameAndRole, [page, size, name, authority]),
            returnValue: _i5.Future<List<_i3.User>>.value(<_i3.User>[]),
          )
          as _i5.Future<List<_i3.User>>);

  @override
  _i5.Future<void> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
